@page "/CreatePost"
@attribute [Authorize]
@using HttpClients
@using Domain.DTOs
@using Domain.Models
@using System.Security.Claims
@inject IUserService userService;
@inject IPostService postService;
@inject NavigationManager navMgr  

<div class="card">
 
    
        <h2> Create a post </h2>
        <div class="form-group-field">
            <label> Title: </label>
            <input type="text" @bind="postTitle"/>
        </div>
    <div class="text-body">
        <label>Body: </label>
        <input type="text" @bind="postBody" style="width: 200px; height: 150px"/>
    </div>
    
        <div class="form-group-field">
            <label> Please sign your wise words so they can be tracked back to you : </label>
            <input type="text" @bind="userName">
        </div>
        
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    
</div>



@code {
    private IEnumerable<User> users;
    private string? userName;
    private string postTitle;
    private string postBody;
    
    
    private string msg="";


    [CascadingParameter]
    public Task<AuthenticationState> authState { get; set; } = null!;

    private IEnumerable<Claim?> claims;
    private bool isUserLoggedIn;
    
    

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        AuthenticationState authenticationState = await authState;
        ClaimsPrincipal user = authenticationState.User;
        isUserLoggedIn = user.Identity != null;

        if (!isUserLoggedIn)
        
            return;

        claims = user.Claims;


        try
        {
            users = await userService.GetUsers();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task Create()
    {
        msg = "";
        
        if (string.IsNullOrEmpty(userName))
        {
            msg = "Username cant be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title can't be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postBody))
        {
            msg = "Body can't be empty!";
            return;
        }

        try
        {


            PostCreationDto newPost = new(userName, postTitle, postBody);
            await postService.CreateAsync(newPost);
            navMgr.NavigateTo("/ViewPosts");
            

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        
        
    }

}