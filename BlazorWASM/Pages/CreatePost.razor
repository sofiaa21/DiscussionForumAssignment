@page "/CreatePost"
@using Domain.Models
@using HttpClients
@using Domain.DTOs
@inject IUserService userService;
@inject IPostService postService;

<div class="card">
    @if (users == null)
    {
        <label>Loading users...</label>
    }
    else if (!users.Any())
    {
        <label>No users, you cannot create a Todo without assignee.</label>
    }
    else
    {
        <h2> Create a post </h2>
        <div class="form-group-field">
            <label> Title: </label>
            <input type="text" @bind="postTitle"/>
        </div>
        <div class="text-body">
            <label>Body: </label>
            <input type="text" @bind="postBody"/>
        </div>
        <div class="form-group-field">
            <label> Author: </label>
            <select @bind="selectedUserUsername">
                <option> Choose </option>
                @foreach (User user in users)
                {
                    <option value="@user.UserName">@user.UserName</option>
                }
            </select>
        </div>
        
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="Create" class="acceptbtn">Create</button>
        </div>
    }
</div>













@code {
    private IEnumerable<User> users;
    private string? selectedUserUsername;
    private string postTitle;
    private string postBody;
    
    
    private string msg="";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            users = await userService.GetUsers();
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
            msg=e.Message;
        }
    }

    private async Task Create()
    {
        msg = "";
        if (string.IsNullOrEmpty(selectedUserUsername))
        {
            msg = "You must select an assignee!";
            return;
        }
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title can't be empty!";
            return;
        }
        if (string.IsNullOrEmpty(postBody))
        {
            msg = "Body can't be empty!";
            return;
        }

        try
        {
            PostCreationDto dto = new(selectedUserUsername, postTitle, postBody);
            await postService.CreateAsync(dto);
            msg = "Post successfully created!";
            

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
        
        
    }

}